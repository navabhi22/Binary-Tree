
107. Binary Tree Level Order Traversal II
Medium
4.2K
308
Companies

Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -1000 <= Node.val <= 1000




//using HashMap
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        HashMap<Integer,ArrayList<Integer>> mp = new HashMap<Integer,ArrayList<Integer>>();
        
        sol(ans,mp,root,0);
        int size=mp.size();
        for(int i=size-1;i>=0;i--){
            ans.add(mp.get(i));
        }
        return ans;
    }
    public void sol(List<List<Integer>> list,HashMap<Integer,ArrayList<Integer>> mp, TreeNode curr, int level){
        if(curr==null) return;
        int temp = curr.val;
        if(mp.containsKey(level)){
            mp.get(level).add(temp);
        }else{
            ArrayList<Integer> lst = new ArrayList<Integer>();
            mp.put(level,lst);
            mp.get(level).add(temp);
        }
        sol(list,mp,curr.left,level+1);
        sol(list,mp,curr.right,level+1);
        return;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        sol(ans,root,0);
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        for(int i=ans.size()-1;i>=0;i--){
                ArrayList<Integer> levList = new ArrayList<Integer>(ans.get(i));
                list.add(levList);
        }
        return list;
    }
    public void sol(List<List<Integer>> list, TreeNode curr, int level){
        if(curr==null) return;
        int temp = curr.val;
        if(list.size()<=level)
        list.add(new ArrayList<Integer>());
        list.get(level).add(temp);
        sol(list,curr.left,level+1);
        sol(list,curr.right,level+1);
        return;
    }
}
