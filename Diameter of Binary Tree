543. Diameter of Binary Tree
Easy
11K
690
Companies

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

Example 1:

Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:

Input: root = [1,2]
Output: 1

 

Constraints:

    The number of nodes in the tree is in the range [1, 104].
    -100 <= Node.val <= 100


// using pair 
//Note this can be further optimised using DP
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  class  pair{
    int h;
    int d;
  }
    public int diameterOfBinaryTree(TreeNode root) {
        pair p = diaOfBT(root);
        return p.d;

    }
    public pair diaOfBT(TreeNode root) {
        if(root==null){
          pair p = new pair();
          p.h=-1;
          p.d=-1;
          return p;
        }

        pair sp1=diaOfBT(root.left);
        pair sp2=diaOfBT(root.right);
        pair ans = new pair();
        int self=sp1.h+sp2.h+2;
        ans.h=Math.max(sp1.h,sp2.h)+1;
        ans.d=Math.max(self,Math.max(sp1.d,sp2.d));
        return ans;
    }
}


// without pair
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        return diaOfBT(root);
    }
    public int diaOfBT(TreeNode root) {
        if(root==null) return -1;
        int sp1=diaOfBT(root.left);
        int sp2=diaOfBT(root.right);
        int self=height(root.left)+height(root.right)+2;
        int m=(Math.max(sp1,sp2));
        int max=Math.max(m,self);
        return max;
    }
    public int height(TreeNode root){
        if(root==null) return-1;
        int sp1=height(root.left);
        int sp2=height(root.right);
        return Math.max(sp1,sp2)+1;
    }
}
