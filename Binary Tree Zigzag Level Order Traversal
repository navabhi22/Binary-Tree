103. Binary Tree Zigzag Level Order Traversal
Medium
9K
239
Companies

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -100 <= Node.val <= 100




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
         List<List<Integer>> ans = new ArrayList<List<Integer>>();
        sol(ans,root,0);
       int size=ans.size();
       for(int i=0;i<size;i++){
           if(i%2==1){
               Collections.reverse(ans.get(i));
           }
       }
        return ans;
    }
    public void sol(List<List<Integer>> list, TreeNode curr, int level){
        if(curr==null) return;
        int temp = curr.val;
        if(list.size()<=level)
        list.add(new ArrayList<Integer>());
        list.get(level).add(temp);
        sol(list,curr.left,level+1);
        sol(list,curr.right,level+1);
        return;
    }
   
}
