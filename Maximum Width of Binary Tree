662. Maximum Width of Binary Tree
Medium
6.4K
878
Companies

Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

 

Example 1:

Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Example 2:

Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Example 3:

Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).

 

Constraints:

    The number of nodes in the tree is in the range [1, 3000].
    -100 <= Node.val <= 100



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class pair{
        pair(TreeNode node, int pos){
            this.node=node;
            this.pos=pos;
        }
        TreeNode node;
        int pos;
    }
    public int widthOfBinaryTree(TreeNode root) {
        int max=1;
        Queue<pair> q = new LinkedList<pair>();
        q.add(new pair(root,0));
        while(!q.isEmpty()){ 
            int size=q.size();
            int first=0;
            int last=0;
            for(int i=0;i<size;i++){
                int currPos=q.peek().pos;
                if(i==0) first=q.peek().pos;
                if(i==size-1) last=q.peek().pos;
                TreeNode temp = q.remove().node;
                if(temp.left!=null) q.add(new pair(temp.left,2*currPos+1));
                if(temp.right!=null) q.add(new pair(temp.right,2*currPos+2));
            } 
            max=Math.max(max,last-first+1);
        }
        
        return max;
    }
    
}
